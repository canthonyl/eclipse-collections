import "copyrightAndOthers.stg"
import "primitiveAPI.stg"

targetPath() ::= "org/eclipse/collections/api/bag/primitive"

fileName(primitive) ::= "<primitive.name>Bag"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.api.bag.primitive;

import java.util.StringJoiner;

import org.eclipse.collections.api.<name>Iterable;
import org.eclipse.collections.api.bag.Bag;
import org.eclipse.collections.api.block.function.primitive.<name>ToObjectFunction;
<if(!primitive.intPrimitive)>import org.eclipse.collections.api.block.predicate.primitive.IntPredicate;<endif>
import org.eclipse.collections.api.bag.primitive.Mutable<name>Bag;
import org.eclipse.collections.api.block.function.primitive.<name>ToBooleanFunction;
import org.eclipse.collections.api.block.function.primitive.<name>ToByteFunction;
import org.eclipse.collections.api.block.function.primitive.<name>ToShortFunction;
import org.eclipse.collections.api.block.function.primitive.<name>ToCharFunction;
import org.eclipse.collections.api.block.function.primitive.<name>ToDoubleFunction;
import org.eclipse.collections.api.block.function.primitive.<name>ToFloatFunction;
import org.eclipse.collections.api.block.function.primitive.<name>ToIntFunction;
import org.eclipse.collections.api.block.function.primitive.<name>ToLongFunction;
import org.eclipse.collections.api.block.function.primitive.Object<name>ToObjectFunction;
import org.eclipse.collections.api.block.function.primitive.<name>ToObjectFunction;
import org.eclipse.collections.api.block.predicate.primitive.<name>Predicate;
import org.eclipse.collections.api.block.procedure.primitive.<name>Procedure;
import org.eclipse.collections.api.block.procedure.primitive.<name>IntProcedure;
import org.eclipse.collections.api.collection.primitive.MutableBooleanCollection;
import org.eclipse.collections.api.collection.primitive.MutableByteCollection;
import org.eclipse.collections.api.collection.primitive.MutableCharCollection;
import org.eclipse.collections.api.collection.primitive.MutableDoubleCollection;
import org.eclipse.collections.api.collection.primitive.MutableFloatCollection;
import org.eclipse.collections.api.collection.primitive.MutableIntCollection;
import org.eclipse.collections.api.collection.primitive.MutableLongCollection;
import org.eclipse.collections.api.collection.primitive.MutableShortCollection;
import org.eclipse.collections.api.list.ListIterable;
import org.eclipse.collections.api.tuple.primitive.<name>IntPair;

/**
 * This file was automatically generated from template file primitiveBag.stg.
 *
 * @since 3.0.
 */
public interface <name>Bag extends <name>Iterable
{
    /**
     * The size of the Bag when counting only distinct elements.
     */
    int sizeDistinct();

    /**
     * @since 9.0.
     */
    @Override
    default <name>Bag tap(<name>Procedure procedure)
    {
        this.forEach(procedure);
        return this;
    }

    /**
     * Returns all elements of the bag that have a number of occurrences that satisfy the predicate.
     *
     * @since 8.0
     */
    <name>Bag selectByOccurrences(IntPredicate predicate);

    /**
     * Returns the {@code count} most frequently occurring items.
     *
     * In the event of a tie, all of the items with the number of occurrences that match the occurrences of the last
     * item will be returned.
     *
     * @since 8.0
     */
    ListIterable\<<name>IntPair> topOccurrences(int count);

    /**
     * Returns the {@code count} least frequently occurring items.
     *
     * In the event of a tie, all of the items with the number of occurrences that match the occurrences of the last
     * item will be returned.
     *
     * @since 8.0
     */
    ListIterable\<<name>IntPair> bottomOccurrences(int count);

    /**
     * The occurrences of a distinct item in the bag.
     */
    int occurrencesOf(<type> item);

    /**
     * For each distinct item, with the number of occurrences, execute the specified procedure.
     */
    void forEachWithOccurrences(<name>IntProcedure procedure);

    <sharedAPI(fileName(primitive), name)>

    @Override
    \<V> Bag\<V> collect(<name>ToObjectFunction\<? extends V> function);

    default \<R extends MutableBooleanCollection> R collectBoolean(<name>ToBooleanFunction function, R target)
    {
        if (target instanceof MutableBooleanBag)
        {
            MutableBooleanBag targetBag = (MutableBooleanBag) target;
            this.forEachWithOccurrences((each, occurrences) -> targetBag.addOccurrences(function.valueOf(each), occurrences));
        }
    		else
        {
        		this.each(each ->  target.add(function.valueOf(each)));
        	}
        return target;
    }

    default \<R extends MutableByteCollection> R collectByte(<name>ToByteFunction function, R target)
    {
        if (target instanceof MutableByteBag)
        {
            MutableByteBag targetBag = (MutableByteBag) target;
            this.forEachWithOccurrences((each, occurrences) -> targetBag.addOccurrences(function.valueOf(each), occurrences));
        }
    		else
        {
        		this.each(each ->  target.add(function.valueOf(each)));
        	}
        return target;
    }

    default \<R extends MutableCharCollection> R collectChar(<name>ToCharFunction function, R target)
    {
        if (target instanceof MutableCharBag)
        {
            MutableCharBag targetBag = (MutableCharBag) target;
            this.forEachWithOccurrences((each, occurrences) -> targetBag.addOccurrences(function.valueOf(each), occurrences));
        }
    		else
        {
        		this.each(each ->  target.add(function.valueOf(each)));
        	}
        return target;
    }

    default \<R extends MutableShortCollection> R collectShort(<name>ToShortFunction function, R target)
    {
        if (target instanceof MutableShortBag)
        {
            MutableShortBag targetBag = (MutableShortBag) target;
            this.forEachWithOccurrences((each, occurrences) -> targetBag.addOccurrences(function.valueOf(each), occurrences));
        }
    		else
        {
        		this.each(each ->  target.add(function.valueOf(each)));
        	}
        return target;
    }

    default \<R extends MutableIntCollection> R collectInt(<name>ToIntFunction function, R target)
    {
        if (target instanceof MutableIntBag)
        {
            MutableIntBag targetBag = (MutableIntBag) target;
            this.forEachWithOccurrences((each, occurrences) -> targetBag.addOccurrences(function.valueOf(each), occurrences));
        }
    		else
        {
        		this.each(each ->  target.add(function.valueOf(each)));
        }
        return target;
    }
    
    default \<R extends MutableFloatCollection> R collectFloat(<name>ToFloatFunction function, R target)
    {
        if (target instanceof MutableFloatBag)
        {
            MutableFloatBag targetBag = (MutableFloatBag) target;
            this.forEachWithOccurrences((each, occurrences) -> targetBag.addOccurrences(function.valueOf(each), occurrences));
        }
    		else
        {
        		this.each(each ->  target.add(function.valueOf(each)));
        	}
        return target;
    }

    default \<R extends MutableLongCollection> R collectLong(<name>ToLongFunction function, R target)
    {
        if (target instanceof MutableLongBag)
        {
            MutableLongBag targetBag = (MutableLongBag) target;
            this.forEachWithOccurrences((each, occurrences) -> targetBag.addOccurrences(function.valueOf(each), occurrences));
        }
    		else
        {
        		this.each(each ->  target.add(function.valueOf(each)));
        	}
        return target;
    }

    default \<R extends MutableDoubleCollection> R collectDouble(<name>ToDoubleFunction function, R target)
    {
        if (target instanceof MutableDoubleBag)
        {
            MutableDoubleBag targetBag = (MutableDoubleBag) target;
            this.forEachWithOccurrences((each, occurrences) -> targetBag.addOccurrences(function.valueOf(each), occurrences));
        }
    		else
        {
        		this.each(each ->  target.add(function.valueOf(each)));
        	}
        return target;
    }
    
    
    /**
     * Follows the same general contract as {@link Bag#equals(Object)}.
     */
    @Override
    boolean equals(Object o);

    /**
     * Follows the same general contract as {@link Bag#hashCode()}.
     */
    @Override
    int hashCode();

    /**
     * Returns an immutable copy of this bag. If the bag is immutable, it returns itself.
     */
    Immutable<name>Bag toImmutable();

    /**
     * @since 9.2
     */
    default String toStringOfItemToCount()
    {
        StringJoiner joiner = new StringJoiner(", ", "{", "}");
        this.forEachWithOccurrences((each, occurrences) -> joiner.add(each + "=" + occurrences));
        return joiner.toString();
    }
}

>>
